// Code generated by protoc-gen-pgx-orm; DO NOT EDIT.
package orm

import (
    {{- /*gotype: github.com/yaroher/protoc-gen-pgx-orm/orm.GeneratedInfo*/ -}}
    {{- range .Imports }}
    "{{ . }}"
    {{- end }}
)

// ----------------------------------------------------------------------------
// ------------------------- TABLES -------------------------------------------
// ----------------------------------------------------------------------------

var (
{{- range .Tables }}
{{- $table := . }}
    {{$table.GoName}} = new{{$table.GoName}}TableImpl()
{{- end}}
)

// ----------------------------------------------------------------------------
// ------------------------- FIELDS -------------------------------------------
// ----------------------------------------------------------------------------

type (
{{- range .Tables }}
{{- $table := . }}
    {{$table.GoName}}Field interface {
        fieldAlias
        must{{$table.GoName}}Field()
    }
{{- end}}
)
{{- range .Tables }}
{{- $table := . }}
type (
{{- range $index, $field := .Fields }}
    {{LowerCamel $table.GoName}}{{LowerCamel $field.GoName}}FieldImpl struct { *column[{{$field.PgxType}},{{$table.GoName}}Field] }
{{- end}}
)
{{- range $index, $field := .Fields }}
    func (f *{{LowerCamel $table.GoName}}{{LowerCamel $field.GoName}}FieldImpl) must{{$table.GoName}}Field() {}
{{- end}}
func (f fieldAliasImpl) must{{$table.GoName}}Field() {}
{{- end}}
// ----------------------------------------------------------------------------
// ------------------------- SCANNERS -----------------------------------------
// ----------------------------------------------------------------------------

type (
{{- range .Tables }}
{{- $table := . }}
    {{$table.GoName}}Scanner struct {
        {{- range .Fields }}
        {{- $field := . }}
        {{$field.GoName}} {{$field.PgxType}}
        {{- end }}
    }
        {{- end}}
)
{{- range .Tables }}
{{- $table := . }}
func new{{$table.GoName}}Scanner() *{{$table.GoName}}Scanner {
    return &{{$table.GoName}}Scanner{}
}
func (s *{{$table.GoName}}Scanner) values() []any {
    return []any{
        {{- range .Fields }}
        {{- $field := . }}
        s.{{$field.GoName}},
        {{- end }}
    }
}
func (s *{{$table.GoName}}Scanner) getTarget(field string) func() any {
    switch field {
    {{- range .Fields }}
    {{- $field := . }}
    case "{{$field.SqlFieldName}}":
        return func() any { return &s.{{$field.GoName}} }
    {{- end }}
    default:
        panic("unknown field: " + field)
    }
}
func (s *{{$table.GoName}}Scanner) getSetter(field {{$table.GoName}}Field) func() ValueSetter[{{$table.GoName}}Field] {
    switch field.String() {
    {{- range .Fields }}
    {{- $field := . }}
    case "{{$field.SqlFieldName}}":
        return func() ValueSetter[{{$table.GoName}}Field] {
            return NewValueSetter[{{$table.GoName}}Field]({{$table.GoName}}.{{$field.GoName}}, s.{{$field.GoName}})
    }
    {{- end }}
    default:
        panic("unknown field: " + field.String())
    }
}
func (s *{{$table.GoName}}Scanner) getValue(field {{$table.GoName}}Field) func() any {
    switch field.String() {
    {{- range .Fields }}
    {{- $field := . }}
    case "{{$field.SqlFieldName}}":
        return func() any { return s.{{$field.GoName}} }
    {{- end }}
    default:
        panic("unknown field: " + field.String())
    }
}
{{- end}}

// ----------------------------------------------------------------------------
// ------------------------- TABLES_IMPLS--------------------------------------
// ----------------------------------------------------------------------------
type (
{{- range .Tables }}
{{- $table := . }}
    {{LowerCamel $table.GoName}}TableImpl struct {
    *table[{{$table.GoName}}Field, *{{$table.GoName}}Scanner]
        {{- range $index, $field := .Fields }}
        {{$field.GoName}} interface {
        {{$table.GoName}}Field
        {{- range $field.AvailableOperands }}
            {{ . }}[{{$field.PgxType}},{{$table.GoName}}Field]
        {{- end}}
        }
        {{- end }}
    }
{{- end}}
)

{{- range .Tables }}
{{- $table := . }}
func new{{$table.GoName}}TableImpl() *{{LowerCamel $table.GoName}}TableImpl {
    {{- range $index, $field := .Fields }}
    {{LowerCamel $field.GoName}} := &{{LowerCamel $table.GoName}}{{LowerCamel $field.GoName}}FieldImpl{column:newColumn[{{$field.PgxType}}, {{$table.GoName}}Field](fieldAliasImpl("{{$field.SqlFieldName}}")) }
    {{- end }}
    return &{{LowerCamel $table.GoName}}TableImpl{
        table: newTable[{{$table.GoName}}Field, *{{$table.GoName}}Scanner](
            "{{$table.SqlTableName}}",
            new{{$table.GoName}}Scanner,
            {{- range $index,$field:= .Fields }}
            {{LowerCamel $field.GoName}},
            {{- end }}
        ),
        {{- range .Fields }}
        {{- $field := . }}
        {{$field.GoName}}: {{LowerCamel $field.GoName}},
        {{- end }}
    }
}
{{- end }}

// ----------------------------------------------------------------------------
// ------------------------- REPOSITORIES--------------------------------------
// ----------------------------------------------------------------------------

type (
{{- range .Tables }}
{{- $table := . }}
{{- if not $table.Virtual}}
    {{$table.GoName}}Repository = ProtoRepository[{{$table.GoName}}Field, *{{$table.GoName}}Scanner, *{{$table.Name}}]
    {{$table.GoName}}RepositoryOption = ProtoCallOption[{{$table.GoName}}Field, *{{$table.GoName}}Scanner, *{{$table.Name}}]
{{- end }}
{{- end }}
)

{{- range .Tables }}
{{- $table := . }}

{{- if $table.HasVirtualFields }}
type (
    upcast{{$table.ProtoName}}Options struct {
    {{- range $index,$field:= .Fields }}
        {{- if $field.Virtual}}
            {{$field.GoName}} {{$field.TypeInfo.PgxType}}
        {{- end }}
    {{- end }}
    }
    upcast{{$table.ProtoName}}Option func(*upcast{{$table.ProtoName}}Options)
)
{{- range $index,$field:= .Fields }}
    {{- if $field.Virtual}}
    func With{{$table.GoName}}{{$field.GoName}}(value {{$field.TypeInfo.PgxType}}) upcast{{$table.ProtoName}}Option {
    return func(options *upcast{{$table.ProtoName}}Options) {
    options.{{$field.GoName}} = value
    }
    }
    {{- end }}
{{- end }}
{{- end }}

{{- if not $table.Virtual}}
func {{$table.ProtoName}}ToScanner(
{{- range .Fields }}
    {{- $field := . }}
    {{- if $field.IsUserDownCasterNeeded}}
        {{$field.TypeInfo.DownCasterFn.Name}} {{$field.TypeInfo.DownCasterFn.Type}},
    {{- end }}
{{- end }}
{{- if $table.HasVirtualFields }}
opts ...upcast{{$table.ProtoName}}Option,
{{- end}}
) TypeCaster[*{{$table.Name}}, *{{$table.GoName}}Scanner] {
    return func(entity *{{$table.Name}}) *{{$table.GoName}}Scanner {
        if entity == nil {
            return nil
        }
        scanner := &{{$table.GoName}}Scanner{
            {{- range $index,$field:= .Fields }}
            {{- if $field.ApplyAbleToCaster}}
                {{$field.GoName}} : {{$field.ToDownCaster}},
            {{- end }}
            {{- end }}
        }
        {{- range $index, $onOnf:= .OneOfs}}
            {{- range $index, $field:= .Fields}}
                scanner.{{$field.GoName}}={{$field.ToDownCaster}}
            {{- end }}
        {{- end }}
        {{- range $index, $onOnf:= .Embeds}}
            {{- range $index, $field:= .Fields}}
                scanner.{{$field.GoName}}={{$field.ToDownCaster}}
            {{- end }}
        {{- end }}
        {{- if $table.HasVirtualFields }}
        options := &upcast{{$table.ProtoName}}Options{}
        for _, opt := range opts {
            opt(options)
        }
        {{- range $index,$virtualField := $table.GetVirtualFields}}
        scanner.{{$virtualField.GoName}} = options.{{$virtualField.GoName}}
        {{- end }}
        {{- end }}
        return scanner
    }
}
func ScannerTo{{$table.ProtoName}}(
{{- range .Fields }}
    {{- $field := . }}
    {{- if $field.IsUserUpCasterNeeded}}
        {{$field.TypeInfo.UpCasterFn.Name}} {{$field.TypeInfo.UpCasterFn.Type}},
    {{- end }}
{{- end }}
) TypeCaster[*{{$table.GoName}}Scanner, *{{$table.Name}}] {
    return func(model *{{$table.GoName}}Scanner) *{{$table.Name}} {
        if model == nil {
            return nil
        }
        entity:= &{{$table.Name}}{
            {{- range $index,$field:= .Fields }}
            {{- if $field.ApplyAbleToCaster}}
                {{$field.GoName}} : {{$field.ToUpCaster}},
            {{- end }}
            {{- end }}
        }
        {{$table.ToEmbeddedFieldsCast}}
        {{$table.ToOneOffFieldsCast}}
        return entity
    }
}
func New{{$table.GoName}}Repository(
dbGetter DbGetter,
{{- range .AllUserCasters }}
{{.Name}} {{.Type}},
{{- end }}
defaultOpts ...{{$table.GoName}}RepositoryOption,
) {{$table.GoName}}Repository {
    return newGenericRepository(
        newGenericScannerRepository({{$table.GoName}}.table,dbGetter),
        {{$table.ProtoName}}ToScanner(
        {{- range $index,$field:= .Fields }}
            {{- if $field.IsUserDownCasterNeeded}}
                {{- $field.TypeInfo.DownCasterFn.Name}}{{- if $index}},{{- end}}
            {{- end }}
        {{- end }}),
        ScannerTo{{$table.ProtoName}}(
        {{- range $index,$field:= .Fields }}
            {{- if $field.IsUserUpCasterNeeded}}
                {{- $field.TypeInfo.UpCasterFn.Name}}{{- if $index}},{{- end}}
            {{- end }}
        {{- end }}),
        defaultOpts...
    )
}
{{- else }}
func New{{$table.GoName}}ScannerRepository(dbGetter DbGetter) ScannerRepository[{{$table.GoName}}Field ,*{{$table.GoName}}Scanner] {
    return newGenericScannerRepository({{$table.GoName}}.table,dbGetter)
}
{{- end }}
{{- end}}