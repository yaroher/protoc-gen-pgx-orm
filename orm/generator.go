package orm

import (
	"bytes"
	"github.com/iancoleman/strcase"
	"github.com/yaroher/protoc-gen-pgx-orm/help"
	"github.com/yaroher/protoc-gen-pgx-orm/protopgx"
	"github.com/yaroher/protoc-gen-pgx-orm/tabletree"
	"go.uber.org/zap"
	"golang.org/x/tools/imports"
	"google.golang.org/protobuf/compiler/protogen"
	"os"
	"path"
	"slices"
	"strings"
	"text/template"
)

type GeneratedInfo struct {
	Tables       []*tabletree.TableNode
	protoImports []string
}

func (g *GeneratedInfo) Imports() []string {
	if g == nil {
		panic("nil in generated info")
	}
	idents := append([]string{
		"google.golang.org/protobuf/proto",
		"github.com/jackc/pgtype",
	}, g.protoImports...)
	for _, t := range g.Tables {
		for _, f := range t.Fields {
			if f == nil {
				panic("nil field")
			}
			if f.TypeInfo == nil {
				panic("nil type info")
			}
			if f.TypeInfo.SqlType == nil {
				panic("nil sql type in field" + f.GoName())
			}
			if f.TypeInfo.SqlType.Type == protopgx.SqlFiledType_TIMESTAMPTZ {
				if !slices.Contains(idents, "time") {
					idents = append(idents, "time")
				}
			}
		}
	}
	return idents
}
func must[T any](val T, err error) T {
	if err != nil {
		panic(err)
	}
	return val
}
func need(err error) {
	if err != nil {
		panic(err)
	}
}

func writeAllFilesContents(dst string) {
	dr := must(Contet.ReadDir("."))
	for _, f := range dr {
		if strings.Contains(f.Name(), "generator.go") ||
			strings.Contains(f.Name(), "embed.go") ||
			strings.Contains(f.Name(), "test") ||
			strings.Contains(f.Name(), "tmpl") {
			continue
		}
		file := must(Contet.Open(f.Name()))
		buff := make([]byte, must(f.Info()).Size())
		must(file.Read(buff))
		need(file.Close())
		bf := bytes.NewBuffer(buff)
		bf2 := bytes.NewBuffer(nil)
		bf2.WriteString("// Code generated by protoc-gen-pgx-orm. DO NOT EDIT.\n")
		bf2.Write(bf.Bytes())
		help.Logger.Info(
			"write file",
			zap.String("name", f.Name()),
			zap.String("dst", dst),
			zap.Int("size", len(buff)),
		)
		need(os.WriteFile(path.Join(dst, f.Name()), bf2.Bytes(), 0644))
	}
}

func getAllTemplates() []*template.Template {
	dr := must(Contet.ReadDir("."))
	var templates []*template.Template
	for _, f := range dr {
		if strings.Contains(f.Name(), "tmpl") {
			file := must(Contet.Open(f.Name()))
			buff := make([]byte, must(f.Info()).Size())
			must(file.Read(buff))
			need(file.Close())
			t := must(template.New(f.Name()).Funcs(template.FuncMap{
				"LowerCamel": func(str ...string) string {
					return strcase.ToLowerCamel(strings.Join(str, "_"))
				},
				"PathBase": func(str string) string {
					return path.Base(str)
				},
				"PathDir": func(str string) string {
					return path.Dir(str)
				},
				"JoinNextLine": func(str ...string) string {
					return strings.Join(str, "\n")
				},
			}).Parse(string(buff)))
			templates = append(templates, t)
		}
	}
	return templates
}

func GenerateOrm(
	plugin *protogen.Plugin,
	tables []*tabletree.TableNode,
	dstDir string,
) {
	pbImports := make([]string, 0)
	for _, f := range plugin.Files {
		imp := strings.Trim(f.GoImportPath.String(), "\"")
		if strings.Contains(imp, "google.golang.org/protobuf/types/known") || strings.Contains(imp, "gen") {
			continue
		}
		if !slices.Contains(pbImports, imp) {
			pbImports = append(pbImports, imp)
		}
	}
	need(os.MkdirAll(dstDir, 0755))
	writeAllFilesContents(dstDir)
	for _, tmpls := range getAllTemplates() {
		//crate file
		buffer := bytes.NewBuffer(nil)
		need(tmpls.Execute(
			buffer,
			&GeneratedInfo{Tables: tables, protoImports: pbImports},
		))
		content := buffer.Bytes()
		content, err := imports.Process("", content, &imports.Options{})
		if err != nil {
			panic(err)
		}
		bf2 := bytes.NewBuffer(nil)
		bf2.WriteString("// Code generated by protoc-gen-pgx-orm. DO NOT EDIT.\n")
		bf2.Write(content)
		help.Logger.Info(
			"write file",
			zap.String("name", tmpls.Name()),
			zap.String("dst", dstDir),
			zap.Int("size", len(content)),
		)
		need(os.WriteFile(path.Join(dstDir, strings.TrimSuffix(tmpls.Name(), ".tmpl")), bf2.Bytes(), 0644))
	}
}
